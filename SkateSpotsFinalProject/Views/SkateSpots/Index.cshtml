
@model SkateSpotsFinalProject.Models.SkateSpot

@{
    ViewBag.Title = "Index";
}

<h2>Skate Spots</h2>




@*<p>
    @Html.ActionLink("Create New", "Create")
</p>
<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Description)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Lat)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Long)
        </th>
        <th></th>
    </tr>

@foreach (var item in Model) {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.Description)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Lat)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Long)
        </td>
        <td>
            @Html.ActionLink("Edit", "Edit", new { id=item.SkateSpotID }) |
            @Html.ActionLink("Details", "Details", new { id=item.SkateSpotID }) |
            @Html.ActionLink("Delete", "Delete", new { id=item.SkateSpotID })
        </td>
    </tr>
}

</table>*@
<div id="bottom-margin" class="row">
    <div id="map" class="col-md-8"></div>
    <div id="coords"></div>

    <div class="col-md-5">
        @using (Html.BeginForm("Create", "SkateSpots"))
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ShortDescription, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.ShortDescription, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ShortDescription, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div>
                    
                    <div class="col-md-6">
                        @Html.HiddenFor(model => model.Lat, new {})                       
                    </div>
                </div>

                <div>                   
                    <div class="col-md-6">
                        @Html.HiddenFor(model => model.Long, new {})
                        
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-4">
                        <input type="submit" value="Create" class="btn btn-default" />
                    </div>
                </div>
            </div>
        }
    </div>
    
</div>
@section scripts{
    

    
    
    
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDONVnN2aLIMB1nIoRFotCNXpeVbTg9rMM&v=3"></script>
    <script type="text/javascript" src="~/Scripts/App/geolocation-marker.js"></script>
<script>


        var map;
        var markers = [];
        var GeoMarker;



        //INITIATE MAP FUNCTION
        function initMap() {
            map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: 32.662658, lng: -97.183712 },
                zoom: 16,
                fullscreenControl: true

            });
            //USE PLACE MARKER FUNCTION
            map.addListener('click', function (e, play) {
                placeMarkerAndPanTo(e.latLng, map);
                console.log(e.latLng);
                $('#Lat').val(e.latLng.lat())
                $('#Long').val(e.latLng.lng())

            });
            


            
            



            //ARRAY OF LOCATIONS/ MY MARKERS
            //var locations = [{ title: '4 stair at Heritage Church', iwindow: 'In between the two buildings there are two 4 stair sets.', location: { lat: 32.664780, lng: -97.183406 } },
            //{ title: 'Corey School 7 stair set', iwindow: 'Eastside of the building in courtyard, very rocky and narrow.', location: { lat: 32.663097, lng: -97.176810 } },
            //{ title: 'Mr. Jims Gap', iwindow: '2 or 3 feet gap in sidewalk on the Northside of the building.', location: { lat: 32.665083, lng: -97.176158 } },
            //{ title: 'Lutheran Church Curb Gap', iwindow: 'Curb gap to slanted concrete about 3 or 4 feet.', location: { lat: 32.659731, lng: -97.176295 } },
            //{ title: 'Rail and 5 stairs', iwindow: 'Around the back of the building, a 5 stair set with a handrail and another rail to the side of that.', location: { lat: 32.664061, lng: -97.180270 } },
            //{ title: '3 and 4 stair sets', iwindow: 'These are in front of peoples houses right next to eachother.', location: { lat: 32.661220, lng: -97.185884 } },
            //{ title: 'Huge hill Bradley Ln', iwindow: 'The top of a big hill, go westbound on Bradley Ln, rocky at the bottom.', location: { lat: 32.654801, lng: -97.183213 } },
            //{ title: 'Hill and construction gaps.', iwindow: 'Construction is going on so lots of holes in the road that can be nice gaps.', location: { lat: 32.661597, lng: -97.181217 } },
            //{ title: 'Pyramid and 5 stair set', iwindow: 'Pyramid of concrete and 5 stairs on the Northside of the church/building.', location: { lat: 32.654154, lng: -97.176411 } }];

            //var locations = [];

            var coordsDiv = document.getElementById('coords');
            map.controls[google.maps.ControlPosition.TOP_CENTER].push(coordsDiv);
            map.addListener('mousemove', function (event) {
                coordsDiv.textContent =
                    'lat: ' + (event.latLng.lat()) + ', ' +
                    'lng: ' + (event.latLng.lng());
            });

            var largeInfowindow = new google.maps.InfoWindow();
            var bounds = new google.maps.LatLngBounds();


            //GEOLOCATION STUFF


            var GeoMarker = new GeolocationMarker(map);
            GeoMarker.setCircleOptions({ fillColor: 'transparent' });
            GeoMarker.setCircleOptions({ visible: false });
            google.maps.event.addListenerOnce(GeoMarker, 'position_changed', function () {
                map.setCenter(this.getPosition());
                map.fitBounds(this.getBounds());
            });

            google.maps.event.addListener(GeoMarker, 'geolocation_error', function (e) {
                alert('There was an error obtaining your position. Message: ' + e.message);
            });
            GeoMarker.setMap(map);
        



            //LOOP OVER ARRAY OF LOCATIONS TO DROP MARKERS

            $.get('/api/SkateSpotsApi').done(function (data) {
                for (var i = 0; i < data.length; i++) {
                    var position = { lat: data[i].Lat, lng: data[i].Long };
                    var title = data[i].ShortDescription;
                    var iwindow = data[i].Description;
                    var marker = new google.maps.Marker({
                        map: map,
                        position: position,
                        title: title,
                        iwindow: iwindow,
                        animation: google.maps.Animation.DROP,
                        id: data[i].SkateSpotID
                    });

                    markers.push(marker);

                    //bounds.extend(marker.position);

                    marker.addListener('click', function () {
                        console.log(this);
                        populateInfoWindow(this, largeInfowindow);

                    });

                    
                }
            })


            //FIT BOUNDS
            map.fitBounds(bounds);

            //PLACE MARKER FUNCTION
            function placeMarkerAndPanTo(latLng, map, data) {
                var marker = new google.maps.Marker({
                    position: latLng,
                    map: map,
                    title: '',
                    iwindow: '',
                    animation: google.maps.Animation.DROP,
                    draggable: true
                    
                   
                });
                map.panTo(latLng);

                
                marker.addListener('dblclick', function () {
                    marker.setMap(null)


                });
            }

            //INFOWINDOW POPULATION
            function populateInfoWindow(marker, infowindow) {
                if (infowindow.marker != marker) {
                    infowindow.marker = marker;
                    infowindow.setContent('<div>' + marker.iwindow + '</div>' + '<div class="view-link">' + '<a href="/SkateSpots/Delete/'+ marker.id +'">Delete</a>' + '</div>');
                    infowindow.open(map, marker);

                    infowindow.addListener('closeclick', function () {
                        //infowindow.setMarker(null);
                    });
                }
            }
        }

        //INIT FUNCTION LOAD MAP
        google.maps.event.addDomListener(window, 'load', initMap);

        

</script>

    }